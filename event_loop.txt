Resource
1. https://medium.com/javascript-in-plain-english/understanding-javascript-heap-stack-event-loops-and-callback-queue-6fdec3cfe32e
2. https://dev.to/steelvoltage/if-javascript-is-single-threaded-how-is-it-asynchronous-56gd
3. https://blog.bitsrc.io/understanding-asynchronous-javascript-the-event-loop-74cd408419ff#:~:text=JavaScript%20is%20a%20single%2Dthreaded,can%20happen%20at%20a%20time.&text=Using%20asynchronous%20JavaScript%20(such%20as,without%20blocking%20the%20main%20thread.

Concepts

1. callback: https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/

2. events
    https://javascript.info/introduction-browser-events
    https://flaviocopes.com/javascript-events/
    1. events are signal which happens after some action (e.g: mouse click)
    2. events are not part of the core JavaScript. they are part of the browser apis
    3. event handler is a function which runs after a event occurs
    4. Event object is passed to event handler when a event happens on a dom element. The event object contains different properties of the dom element on which the event occurs

3. event delegation (propagation, bubbling, capturing, stopPropagation(), preventDefault(), target, currentTarget)

    (event propagation)
    https://javascript.info/bubbling-and-capturing

    (event target and currentTarget)
    https://dillionmegida.com/p/understanding-event-target-and-use-cases/
    http://www.qc4blog.com/?p=650

    (event delegation)
    https://javascript.info/event-delegation
    https://medium.com/@bretdoucette/part-4-what-is-event-delegation-in-javascript-f5c8c0de2983
    https://dmitripavlutin.com/javascript-event-delegation/ (how event delegation helps)


    1. event target is the place from which the event is originated (clicked for 'click' event. If a event happens on a stack of elements then target represents the bottommost element). 
    currentTarget is the element which listens to the event (which can be same as target, or an element above the hierarchy)
    2. event delegation is a pattern where a set of elements are represented by a common ancestor
    3. e.stopPropagation() stops the event bubbling up the elements stack
    4. e.preventDefault() is about stopping a default behaviour of an event by the browser (e.g clicking on a checkbox, form submit refresh)
    5. event propagation ihas three phases. capturing (top-down), target phase, bubbling (bottom-up),
    first the event happens on the top level elements all the way to the innermost element, after that the event handler is executed on the target, later the bubbling happens
    6. event bubbling is the default way javascript event propagation happen. for capturing, need to change the boolean flag in addEventListener,
    main thing to note here is events are not listened two times for both capture and bubbling. They are either listened to in capturing mode (by setting boolean flag),
    or in bubbling mode which is the default behaviour

4. asynchronous js
    1. It's needed so that if a operation is needed to be executed and it takes more time to execute (for waiting for action to complete), then using asynchronous js, this block
    of code can be executed later once the operation is completed
    https://www.pluralsight.com/guides/introduction-to-asynchronous-javascript

5. single threaded vs asynchronous js
    1. JavaScript language is single-threaded (two statements can not run in parallel) and the asynchronous behaviour is not part of the JavaScript language itself, 
    rather they are built on top of the core JavaScript language in the browser (or the programming environment) and accessed through the browser APIs
    https://codesthq.com/asynchronous-and-single-threaded-javascript-meet-the-event-loop/#:~:text=Synchronous%20with%20multiple%20threads%20%3A%20Tasks,single%20task%20can%20be%20executed.


6. browser web apis
    1. They are implemented by browser on top of javascript. Can be used for manipulating the web page (dom api) or fetching data from server (fetch api)
    or some general helpful tools (setTimeOut())

7. event loops, callback/message/event queue, job queue

    1. event loop is a background task that happens. it's purpose is to continuously check whether the call stack is empty or not. 
    If the call stack is empty then the event loop picks up the functions from callback queue and sends them to the call stack
    2. the web apis are the intermediate state (thread) between call stack and callback queue where the events wait untill completion. 
    3. callback functions are inserted into callback queue after the event is completed
    4. job queue is a queue used for new Promise() and has higher priority than other callbacks
    5. browser js runtime environment contains web apis, event loop, job and callback queue
    6. Browser Web APIs- threads created by browser implemented in C++ to handle async events like DOM events, http request, setTimeout, etc
    7. In case of DOM events, the event listener sits in the web APIs environment waiting for a certain event (click event in this case) to happen, 
    and when that event happens, then the callback function is placed in the message queue waiting to be executed
    8. This model of executing js asynchronously is called concurrency model 

    https://medium.com/front-end-weekly/javascript-event-loop-explained-4cd26af121d4
    https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40
    https://www.knowledgescoops.com/2019/07/event-loops-event-tables-event-queues.html
    https://medium.com/@Rahulx1/understanding-event-loop-call-stack-event-job-queue-in-javascript-63dcd2c71ecd
    https://cek.io/blog/2015/12/03/event-loop/
















